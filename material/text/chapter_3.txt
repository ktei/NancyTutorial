[b]一点基础知识[/b]
在继续下面的讲解之前，我觉得还是有必要给新手回顾一下基础知识，下面开始。

在你做web开发的时候，不论你用什么框架，你基本上都只是在做两件事情：接收请求和处理请求。我们每天上网的时候，虽然表面上看到的是眼花缭乱的网页，但是如果你从计算机和通信的角度来看，你跟网站之间的交互实际上只是一次又一次基于HTTP协议的通信罢了。

我们举个例子。现在打开你的Chrome浏览器（如果没有的话，你最好装一个，因为后面也许会用到），输入百度网址（海外朋友请输入google网址），然后回车。没错，你看到的是网页，但是这一瞬间究竟发生了什么呢？很简单：粗略来讲一下的话，你发送了一个GET request，这个request（以后请求我用request，回复我用response，这样打字快一些）经过各种艰难险阻，最终到达了google的某个服务器。于是google的那个服务器就开始想：恩……我得到了一个www.google.com的GET request，我应该怎么办呢——接着google服务器就开始查自己的路由表。它找啊找，找到了根目录（'/'，即www.google.com)所对应的动作，你大可以把这个动作假想成一个函数。于是google服务器便调用了这个函数。而这个函数所做的事情非常简单：返回给你Status为200的response。此response里包含一份HTML。此HTML被Chrome浏览器经过分析并以可视化的模式呈现给你。

以上只是非常粗浅的过程描述，其实这中间的过程远比我讲的复杂。但是一般情况下，你不需要了解太底层的协议。了解一些web开发的基本常识是很重要的，我知道有的人甚至在做完一个project之后，都依然对POST和GET的区别而感到不解。

我们下面就来了解一下。GET和POST都属于HTTP verb，说白了就是你以怎样的动作发出一个HTTP request。举例来讲，比如有个网站是example.com，然后它的注册页面的URL是example.com/signup。你输入这个URL然后到达了注册页面，但是当你填写完信息点“Sign up”后，如果细心的话你会发现：浏览器发出的request依然是example.com/signup。然后有的人就疑惑了：一个URL怎么可以处理两件事情？服务器怎么会知道哪个是哪个。答案估计你已经猜到了：就是同过verb。

你在浏览器里输入网址，然后回车以后，你发送的永远是GET request。而当你填写完表单，点击提交按钮后，通常情况下（有例外的哦），浏览器发出的都是POST request。所以说，一个URL可以对应至少两种动作：
GET example.com
POST example.com

如果你有点REST的想法（REST是指Representational state transfer，不是休息的意思！），还会发现，PUT以及DELETE都还没有被提及。没错，它们也是HTTP协议中所定义的verb，但是由于这篇教程不是专门讲REST的，所以我也就不在这里详细说明了。

我们常说的Ajax，无非就是利用JavaScript向服务器发送一个“安静”的HTTP request。无论你是Ajax请求，还是非Ajax请求，对于服务器来说，是没有太大区别的，实际上区别也就在于到底是返回给你一份HTML，还是返回给你一堆XML或JSON（现在基本上都用JSON了，用XML的比较少）。

如果你是asp.net webform开发者，我还得提醒你一点：webform的事件驱动跟winform的事件驱动是两回事。实际上你在webform中button_click事件中处理的是来自客户端的一个HTTP request，千万不要把它跟桌面系统开发搞混了。